<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hadoop on Hugo Theme Tailwind Example Site</title><link>https://cuisiting.github.io/tags/hadoop/</link><description>Recent content in Hadoop on Hugo Theme Tailwind Example Site</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Cuisiting</copyright><lastBuildDate>Tue, 30 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cuisiting.github.io/tags/hadoop/index.xml" rel="self" type="application/rss+xml"/><item><title>Hadoop Architecture</title><link>https://cuisiting.github.io/posts/cuisiting/hadooparchitecture/</link><pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate><guid>https://cuisiting.github.io/posts/cuisiting/hadooparchitecture/</guid><description>keyword: Hadoop, big data, AI, Architecture
Hadoop Architecture .
Apache Hadoop has the following three layers of Architecture.
Map-Reduce
YARN
HDFS
Map-Reduce YARN
HDFS</description></item><item><title>Spark&amp;Hadoop</title><link>https://cuisiting.github.io/posts/cuisiting/sparkhadoop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cuisiting.github.io/posts/cuisiting/sparkhadoop/</guid><description>keyword: Hadopp, Spark, big data, AI, Architecture
Case Study 1 .
Case Study 2 .
Case Study 3 .
Case Study 4 Hadoop vs Spark: 使用场景 Hadoop 使用场景 Hadoop 适合以下场景：
大规模数据存储和处理: 当需要处理 PB 级别的数据时，Hadoop 的 HDFS 提供了一个可靠的存储解决方案。 高吞吐量的批处理作业: 对于需要高吞吐量而不是低延迟的长时间运行的批处理作业，Hadoop 是理想的选择。 成本效益的解决方案: 对于预算有限的项目，Hadoop 的开源特性使其成为一种成本效益高的选择。 兼容性和成熟的生态系统: Hadoop 已经成熟，拥有一个庞大的生态系统，适用于各种数据处理需求。 Spark 使用场景 Spark 适合以下场景：
快速数据处理和实时分析: 当需要快速处理数据或进行实时数据分析时，Spark 的内存计算功能提供了显著的速度优势。 迭代算法和机器学习: 对于需要迭代计算的机器学习算法，Spark 的内存计算比 Hadoop 更高效。 多种数据处理格式: 如果需要支持多种数据处理方式（批处理、流处理、交互式查询、机器学习），Spark 提供了一站式解决方案。 高级分析: Spark 支持 SQL 查询、流处理和复杂的分析，这些在 Hadoop MapReduce 中不那么容易实现。 根据项目需求和资源情况，可以选择适合的框架。在某些复杂的项目中，Hadoop 和 Spark 可以并行使用，以充分利用两者的优势。</description></item><item><title>数据格式</title><link>https://cuisiting.github.io/posts/cuisiting/%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/</link><pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate><guid>https://cuisiting.github.io/posts/cuisiting/%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/</guid><description>二进制数据格式：
数据格式 特点 适用场景 使用服务/应用程序 Avro 二进制格式，高性能，模式定义 大数据处理，分布式系统 Apache Hadoop，Kafka Protocol Buffers 二进制格式，高性能，代码生成 分布式系统，网络通信，高性能数据交换 gRPC，Google APIs MessagePack 二进制格式，紧凑，多语言支持 数据存储，通信，高性能应用程序 Redis，MessagePack-RPC BSON 二进制JSON扩展，高性能，数据类型支持 NoSQL数据库，MongoDB数据交换 MongoDB 文本数据格式：
数据格式 特点 适用场景 使用服务/应用程序 JSON 文本格式，易于阅读，易于编写 Web应用程序，API，配置文件 RESTful API，JavaScript XML 标记语言，支持嵌套，复杂结构 数据交换，配置文件，复杂文档 SOAP，RSS，配置文件 YAML 人类可读，简洁语法，易于编写 配置文件，人类可读数据交换 Docker Compose，Ansible 其他数据格式：
数据格式 特点 适用场景 使用服务/应用程序 TOML 人类可读，简单，易于编写 配置文件，人类可读数据交换 Rust，Cargo配置文件 CSV 文本格式，表格数据，易于导入导出 数据导入导出，电子表格 Microsoft Excel，Pandas HTML 网页标记语言，网页内容描述 网页制作，数据抓取，内容展示 Web浏览器，网页编辑器 EDN 可扩展数据表示，Clojure相关 Clojure编程，数据交换 Clojure，Datomic</description></item></channel></rss>