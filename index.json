[{"content":"keyword: Alfred, Script, Filter\n在配置Alfred Script Filter 时, 若要打开的文件路径 为\n/Users/your_user/Library/Application\\ Support/xxxxxx 这类中间带有空格的路径, Alfred 将不能正常打开\n{ \u0026#34;uid\u0026#34;: \u0026#34;kconfig\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;file\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;k config\u0026#34;, \u0026#34;subtitle\u0026#34;: \u0026#34;~/Desktop\u0026#34;, \u0026#34;arg\u0026#34;: [\u0026#34;vscode\u0026#34;, \u0026#34;/Users/your_user/toolchain/MyShell/Alfred/script_filter_k_link/info.plist\u0026#34;], \u0026#34;autocomplete\u0026#34;: \u0026#34;Desktop\u0026#34;, \u0026#34;icon\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;fileicon\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;~/Desktop\u0026#34; } }, 解决办法: 为 上述文件创建文件链接\n格式：ln [原文件] [硬链接文件] ","permalink":"https://cuisiting.github.io/posts/cuisiting/script_filter_k_link/","summary":"keyword: Alfred, Script, Filter\n在配置Alfred Script Filter 时, 若要打开的文件路径 为\n/Users/your_user/Library/Application\\ Support/xxxxxx 这类中间带有空格的路径, Alfred 将不能正常打开\n{ \u0026#34;uid\u0026#34;: \u0026#34;kconfig\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;file\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;k config\u0026#34;, \u0026#34;subtitle\u0026#34;: \u0026#34;~/Desktop\u0026#34;, \u0026#34;arg\u0026#34;: [\u0026#34;vscode\u0026#34;, \u0026#34;/Users/your_user/toolchain/MyShell/Alfred/script_filter_k_link/info.plist\u0026#34;], \u0026#34;autocomplete\u0026#34;: \u0026#34;Desktop\u0026#34;, \u0026#34;icon\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;fileicon\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;~/Desktop\u0026#34; } }, 解决办法: 为 上述文件创建文件链接\n格式：ln [原文件] [硬链接文件] ","title":"Alfred Script Filter"},{"content":"keyword: AWS instance\n创建key 用于 ssh 鉴权登陆\n创建成功后，查看instance Details ip , ssh 登陆\nchmod 400 [your pem path] ssh -i [your pem path] admin@your_ip 安装 shadowsocket docker\ndocker pull shadowsocks/shadowsocks-libev 指定 shadowsocks container 的端口，检查你的云服务是否开启了该端口 启动 docker instance 检查你的云服务是否开启了该端口\nps=\u0026lt;你的密码\u0026gt; port=\u0026lt;你的端口\u0026gt; docker run -e PASSWORD=$ps -p $port:8388 -p $port:8388/udp -d --restart always shadowsocks/shadowsocks-libev ","permalink":"https://cuisiting.github.io/posts/cuisiting/awsshadowsocket/","summary":"keyword: AWS instance\n创建key 用于 ssh 鉴权登陆\n创建成功后，查看instance Details ip , ssh 登陆\nchmod 400 [your pem path] ssh -i [your pem path] admin@your_ip 安装 shadowsocket docker\ndocker pull shadowsocks/shadowsocks-libev 指定 shadowsocks container 的端口，检查你的云服务是否开启了该端口 启动 docker instance 检查你的云服务是否开启了该端口\nps=\u0026lt;你的密码\u0026gt; port=\u0026lt;你的端口\u0026gt; docker run -e PASSWORD=$ps -p $port:8388 -p $port:8388/udp -d --restart always shadowsocks/shadowsocks-libev ","title":"Aws Shadowsocket"},{"content":"keyword: Docker\nWhat is the difference between Docker Desktop for Linux and Docker Engine?\nDocker Desktop 和 Docker Engine 的区别\nInstall docker for debian\nInstall using the apt repository\n# Add Docker\u0026#39;s official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg # Add the repository to Apt sources: echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \\ $(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;) stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update Install the Docker packages.\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin Verify that the installation is successful by running the hello-world image:\nsudo docker run hello-world 当执行\ndocker pull 遇到\npermission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post \u0026#34;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/images/create?fromImage=shadowsocks%2Fshadowsocks-libev\u0026amp;tag=edge\u0026#34;: dial unix /var/run/docker.sock: connect: permission denied 为当前用户添加权限\nsudo gpasswd -a $USER docker sudo vi /etc/ssh/sshd_config find PasswordAuthentication key ,change value to yes sudo passwd 你的用户名 # 重新登录 sudo pkill -9 -u 你的用户名 ","permalink":"https://cuisiting.github.io/posts/cuisiting/docker/","summary":"keyword: Docker\nWhat is the difference between Docker Desktop for Linux and Docker Engine?\nDocker Desktop 和 Docker Engine 的区别\nInstall docker for debian\nInstall using the apt repository\n# Add Docker\u0026#39;s official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg # Add the repository to Apt sources: echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.","title":"Docker"},{"content":"keyword: Flow Diagram, product , efficiency, 工程效率\n最好的 流程图 架构图 软件 ","permalink":"https://cuisiting.github.io/posts/cuisiting/flowdiagram/","summary":"keyword: Flow Diagram, product , efficiency, 工程效率\n最好的 流程图 架构图 软件 ","title":"Flow Diagram"},{"content":"keyword: Hadoop, big data, AI, Architecture\nHadoop Architecture.\nApache Hadoop has the following three layers of Architecture.\nMap-Reduce\nYARN\nHDFS\nMap-Reduce YARN HDFS ","permalink":"https://cuisiting.github.io/posts/cuisiting/hadooparchitecture/","summary":"keyword: Hadoop, big data, AI, Architecture\nHadoop Architecture.\nApache Hadoop has the following three layers of Architecture.\nMap-Reduce\nYARN\nHDFS\nMap-Reduce YARN HDFS ","title":"Hadoop Architecture"},{"content":"hugo-theme-learn 不支持 shortcode 按照 Hugo 官方关于自定义 shortcode 文档 https://gohugo.io/templates/shortcode-templates/ 设置如下 :\n在 layouts/shortcodes 创建文件，并添加\n\u0026lt;!-- rawhtml --\u0026gt; {{.Inner}} 在Test.md 中添加 图片\n结果：不能将 中的内容原样作为标签显示\n","permalink":"https://cuisiting.github.io/posts/cuisiting/hugo-theme-learn%E4%B8%8D%E6%94%AF%E6%8C%81shortcode/","summary":"hugo-theme-learn 不支持 shortcode 按照 Hugo 官方关于自定义 shortcode 文档 https://gohugo.io/templates/shortcode-templates/ 设置如下 :\n在 layouts/shortcodes 创建文件，并添加\n\u0026lt;!-- rawhtml --\u0026gt; {{.Inner}} 在Test.md 中添加 图片\n结果：不能将 中的内容原样作为标签显示","title":"hugo-theme-learn 不支持 shortcode"},{"content":"The following steps are here to help you initialize your new website. If you don\u0026rsquo;t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners.\nCreate your project Hugo provides a new command to create a new website.\nhugo new site \u0026lt;new_project\u0026gt; Install the theme Install the Hugo-theme-learn theme by following this documentation\nThis theme\u0026rsquo;s repository is: https://github.com/matcornic/hugo-theme-learn.git\nAlternatively, you can download the theme as .zip file and extract it in the themes directory\nBasic configuration When building the website, you can set a theme by using --theme option. However, we suggest you modify the configuration file (config.toml) and set the theme as the default. You can also add the [outputs] section to enable the search functionality.\n# Change the default theme to be use when building the site with Hugo theme = \u0026#34;hugo-theme-learn\u0026#34; # For search functionality [outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Create your first chapter page Chapters are pages that contain other child pages. It has a special layout style and usually just contains a chapter name, the title and a brief abstract of the section.\n### Chapter 1 # Basics Discover what this Hugo theme is all about and the core concepts behind it. renders as\nHugo-theme-learn provides archetypes to create skeletons for your website. Begin by creating your first chapter page with the following command\nhugo new --kind chapter basics/_index.md By opening the given file, you should see the property chapter=true on top, meaning this page is a chapter.\nBy default all chapters and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata.\nCreate your first content pages Then, create content pages inside the previously created chapter. Here are two ways to create content in the chapter:\nhugo new basics/first-content.md hugo new basics/second-content/_index.md Feel free to edit thoses files by adding some sample content and replacing the title value in the beginning of the files.\nLaunching the website locally Launch by using the following command:\nhugo serve Go to http://localhost:1313\nYou should notice three things:\nYou have a left-side Basics menu, containing two submenus with names equal to the title properties in the previously created files. The home page explains how to customize it by following the instructions. When you run hugo serve, when the contents of the files change, the page automatically refreshes with the changes. Neat! Build the website When your site is ready to deploy, run the following command:\nhugo A public folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server.\n","permalink":"https://cuisiting.github.io/posts/cuisiting/my2/","summary":"The following steps are here to help you initialize your new website. If you don\u0026rsquo;t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners.\nCreate your project Hugo provides a new command to create a new website.\nhugo new site \u0026lt;new_project\u0026gt; Install the theme Install the Hugo-theme-learn theme by following this documentation\nThis theme\u0026rsquo;s repository is: https://github.com/matcornic/hugo-theme-learn.git\nAlternatively, you can download the theme as .","title":"Installation"},{"content":"keyword: macos, inputmethod ,auto ,switch\nInputSourceSelector\n# 查看 InputSourceSelector list # 切换 InputSourceSelector select ","permalink":"https://cuisiting.github.io/posts/cuisiting/macos_inputmethod_auto_switch/","summary":"keyword: macos, inputmethod ,auto ,switch\nInputSourceSelector\n# 查看 InputSourceSelector list # 切换 InputSourceSelector select ","title":"macos inputmethod auto switch"},{"content":"keyword: 副业,idea,\nSideIdea\n","permalink":"https://cuisiting.github.io/posts/cuisiting/sideidea/","summary":"keyword: 副业,idea,\nSideIdea","title":"sideidea"},{"content":"keyword: Spark, big date ,AI, Architecture\nSpark Architecture.\n","permalink":"https://cuisiting.github.io/posts/cuisiting/spark/","summary":"keyword: Spark, big date ,AI, Architecture\nSpark Architecture.","title":"Spark Architecture"},{"content":"keyword: Hadopp, Spark, big data, AI, Architecture\nCase Study 1.\nCase Study 2.\nCase Study 3.\nCase Study 4\nHadoop vs Spark: 使用场景 Hadoop 使用场景 Hadoop 适合以下场景：\n大规模数据存储和处理: 当需要处理 PB 级别的数据时，Hadoop 的 HDFS 提供了一个可靠的存储解决方案。 高吞吐量的批处理作业: 对于需要高吞吐量而不是低延迟的长时间运行的批处理作业，Hadoop 是理想的选择。 成本效益的解决方案: 对于预算有限的项目，Hadoop 的开源特性使其成为一种成本效益高的选择。 兼容性和成熟的生态系统: Hadoop 已经成熟，拥有一个庞大的生态系统，适用于各种数据处理需求。 Spark 使用场景 Spark 适合以下场景：\n快速数据处理和实时分析: 当需要快速处理数据或进行实时数据分析时，Spark 的内存计算功能提供了显著的速度优势。 迭代算法和机器学习: 对于需要迭代计算的机器学习算法，Spark 的内存计算比 Hadoop 更高效。 多种数据处理格式: 如果需要支持多种数据处理方式（批处理、流处理、交互式查询、机器学习），Spark 提供了一站式解决方案。 高级分析: Spark 支持 SQL 查询、流处理和复杂的分析，这些在 Hadoop MapReduce 中不那么容易实现。 根据项目需求和资源情况，可以选择适合的框架。在某些复杂的项目中，Hadoop 和 Spark 可以并行使用，以充分利用两者的优势。\n","permalink":"https://cuisiting.github.io/posts/cuisiting/sparkhadoop/","summary":"keyword: Hadopp, Spark, big data, AI, Architecture\nCase Study 1.\nCase Study 2.\nCase Study 3.\nCase Study 4\nHadoop vs Spark: 使用场景 Hadoop 使用场景 Hadoop 适合以下场景：\n大规模数据存储和处理: 当需要处理 PB 级别的数据时，Hadoop 的 HDFS 提供了一个可靠的存储解决方案。 高吞吐量的批处理作业: 对于需要高吞吐量而不是低延迟的长时间运行的批处理作业，Hadoop 是理想的选择。 成本效益的解决方案: 对于预算有限的项目，Hadoop 的开源特性使其成为一种成本效益高的选择。 兼容性和成熟的生态系统: Hadoop 已经成熟，拥有一个庞大的生态系统，适用于各种数据处理需求。 Spark 使用场景 Spark 适合以下场景：\n快速数据处理和实时分析: 当需要快速处理数据或进行实时数据分析时，Spark 的内存计算功能提供了显著的速度优势。 迭代算法和机器学习: 对于需要迭代计算的机器学习算法，Spark 的内存计算比 Hadoop 更高效。 多种数据处理格式: 如果需要支持多种数据处理方式（批处理、流处理、交互式查询、机器学习），Spark 提供了一站式解决方案。 高级分析: Spark 支持 SQL 查询、流处理和复杂的分析，这些在 Hadoop MapReduce 中不那么容易实现。 根据项目需求和资源情况，可以选择适合的框架。在某些复杂的项目中，Hadoop 和 Spark 可以并行使用，以充分利用两者的优势。","title":"Spark\u0026Hadoop"},{"content":"环境要求 git\n开始盖别墅 安装hugo Hugo 官方安装：https://gohugo.io/installation/ 用hugo 命令 创建 后台工程，相当于系统后台，用于编辑Blog hugo new site MyBlog cd MyBlog git init # 安装主题 git submodule add git@github.com:cuisiting/ hugo-theme-learn.git themes/hugo-theme-learn # 指定主题 echo \u0026#34;theme = \u0026#39;hugo-theme-learn\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml # 部署到本地查看一下 hugo server 至此，我们在本地电脑上，创建一个hugo 工程来存储blog 文件\n小练习：增加一篇Blog，按如下的目录结构 添加文件 ，注意 需要创建 _index.md \u0026amp; 格式\nRootProject └──content/ ├── _index.md └── 个人随想 ├── _index.md └── my_first.md 如上，我们在本地电脑上，创建一个 工程MyBlog 来存储blog 文件。\n但是我们最终是需要将Blog 发布到 自由 、广大的互联网上。\n现在我们用一种成本最小，但体验极佳的方式 将我们的Blog发布\n创建2个仓库https://github.com/new\n创建后台仓库工程 https://github.com/[username]/MyBlog，刚才的本地工程 push 到该后台仓库 创建前台仓库工程，保存网站静态文件存储仓库，拥有前台展示， 注意：若期望通过 https://[username].github.io 来访问blog ，该仓库的名字须为 [username].github.io https://github.com/[username]/[username].github.io 为了实现 后台仓库修改代码 \u0026mdash;\u0026gt; 前台仓库自动更新，我们需要利用github 的自动化CI/CD 工具 github action\n创建 github action 所需秘钥 依次 点击 github头像 \u0026mdash;\u0026gt; Setting \u0026mdash;\u0026gt; Developer Settings \u0026ndash;\u0026gt; Personal access tokens\n勾选\n点击Generate token生成token，并先复制保存该token。\nAttention！！！关键步骤\n在后台仓库 MyBlog 中 新建一个github-actions分支【可选】：git checkout -b github-actions 在后台仓库 MyBlog 创建文件夹.github/workflows 在workflows里新建一个后缀为publish.yml (名字不限)的配置文件 将如下配置写入 publish.yml name: github pages on: push: branches: - github-actions # 监听的分支名 jobs: deploy: runs-on: ubuntu-latest # 在什么环境运行任务 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch git submodule 中的主题仓库 fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; - name: Build run: hugo --minify # hugo构建静态网页 - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: # 注意：修改这个参数 格式为，[用户名]/[前台仓库名] external_repository: tomial/tomial.github.io # 发布到其他repo需要提供上面生成的 personal access token personal_token: ${{ secrets.ACTION_ACCESS_TOKEN }} publish_dir: ./public # 发布branch publish_branch: main 用git 命令将 .github/workflows/publish.yml 提交到后台仓库\n安装评论\nHugo server 验证\n创建github action\n参考link https://gohugo.io/installation/ https://gohugo.io/getting-started/quick-start/ ","permalink":"https://cuisiting.github.io/posts/cuisiting/hugogithubaction/","summary":"环境要求 git\n开始盖别墅 安装hugo Hugo 官方安装：https://gohugo.io/installation/ 用hugo 命令 创建 后台工程，相当于系统后台，用于编辑Blog hugo new site MyBlog cd MyBlog git init # 安装主题 git submodule add git@github.com:cuisiting/ hugo-theme-learn.git themes/hugo-theme-learn # 指定主题 echo \u0026#34;theme = \u0026#39;hugo-theme-learn\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml # 部署到本地查看一下 hugo server 至此，我们在本地电脑上，创建一个hugo 工程来存储blog 文件\n小练习：增加一篇Blog，按如下的目录结构 添加文件 ，注意 需要创建 _index.md \u0026amp; 格式\nRootProject └──content/ ├── _index.md └── 个人随想 ├── _index.md └── my_first.md 如上，我们在本地电脑上，创建一个 工程MyBlog 来存储blog 文件。\n但是我们最终是需要将Blog 发布到 自由 、广大的互联网上。\n现在我们用一种成本最小，但体验极佳的方式 将我们的Blog发布\n创建2个仓库https://github.com/new\n创建后台仓库工程 https://github.","title":"不花钱 ！搭建Blog！"},{"content":"StepNpul\n每次上完卫生间洗完手，在用手开门把手 总感觉白洗这个手了。\n有这这个脚开门把手真的舒服。在流感 COVID-19 期间很有用\n《飞行家》片段 莱昂纳多严重洁癖厕所疯狂洗手 场景 1\n场景 2\n","permalink":"https://cuisiting.github.io/posts/cuisiting/stepnpull/","summary":"StepNpul\n每次上完卫生间洗完手，在用手开门把手 总感觉白洗这个手了。\n有这这个脚开门把手真的舒服。在流感 COVID-19 期间很有用\n《飞行家》片段 莱昂纳多严重洁癖厕所疯狂洗手 场景 1\n场景 2","title":"好产品, StepNpull, 卫生间"},{"content":"keyword: 亚麻,八卦, 湾区,\n湾区好公司 https://www.intuit.com/\nhttps://www.levels.fyi/companies/intuit/salaries\nhttps://www.adobe.com/\nhttps://www.levels.fyi/companies/adobe/salaries\n","permalink":"https://cuisiting.github.io/posts/cuisiting/%E6%B9%BE%E5%8C%BA%E5%A5%BD%E5%85%AC%E5%8F%B8/","summary":"keyword: 亚麻,八卦, 湾区,\n湾区好公司 https://www.intuit.com/\nhttps://www.levels.fyi/companies/intuit/salaries\nhttps://www.adobe.com/\nhttps://www.levels.fyi/companies/adobe/salaries","title":"湾区好公司"},{"content":"keyword: 英语,书面语,缩写,\nASAP as soon as possible 通常用于书面和口语交流中，意味着希望某事能尽快完成或希望对方能够迅速响应 RSVP Respond, if it pleases you 通常用在邀请函中，请求收件人回复他们是否会出席所邀请的活动。这是一种礼仪性的请求，意在让举办者知道预期的出席人数，以便相应地做好准备 RSVP wikipedia RITM Request Item 一般用于IT 支持服务, 非通用 ","permalink":"https://cuisiting.github.io/posts/cuisiting/%E8%8B%B1%E8%AF%AD%E4%B9%A6%E9%9D%A2%E8%AF%AD%E7%BC%A9%E5%86%99/","summary":"keyword: 英语,书面语,缩写,\nASAP as soon as possible 通常用于书面和口语交流中，意味着希望某事能尽快完成或希望对方能够迅速响应 RSVP Respond, if it pleases you 通常用在邀请函中，请求收件人回复他们是否会出席所邀请的活动。这是一种礼仪性的请求，意在让举办者知道预期的出席人数，以便相应地做好准备 RSVP wikipedia RITM Request Item 一般用于IT 支持服务, 非通用 ","title":"英语书面语缩写"},{"content":"https://gohugo.io/templates/render-hooks/\n","permalink":"https://cuisiting.github.io/posts/cuisiting/%E6%A8%A1%E6%9D%BF/","summary":"https://gohugo.io/templates/render-hooks/","title":"设置HugoMarkdown图片大小"},{"content":"https://gohugo.io/templates/render-hooks/\n","permalink":"https://cuisiting.github.io/posts/cuisiting/%E8%AE%BE%E7%BD%AEhugomarkdown%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F/","summary":"https://gohugo.io/templates/render-hooks/","title":"设置HugoMarkdown图片大小"},{"content":"keyword: 美国 计算机 硕士, USA ,CS , Master\n大学 MS - Master of Science EE - Electrical Engineering CE - Computer Engineering CS - Computer Science SE - Software Engineering CIS - Computer Information Systems MIS - Management Information Systems IT - Information Technology 德克萨斯州立大学（Texas State University）\ngraph LR A[Degree Types] --\u0026gt;|Master\u0026#39;s Degree| B[MA/MS] A --\u0026gt;|Doctoral Degree| C[DA] B --\u0026gt; D[MS in EE] B --\u0026gt; E[MS in CE] B --\u0026gt; F[MS in CS] B --\u0026gt; G[MS in SE] B --\u0026gt; H[MS in CIS] B --\u0026gt; I[MS in MIS] B --\u0026gt; J[MS in IT] D[MS in EE] --\u0026gt; EE[Electrical Engineering] E[MS in CE] --\u0026gt; CE[Computer Engineering] F[MS in CS] --\u0026gt; CS[Computer Science] F[MS in CS] --\u0026gt; DS[Data Science] G[MS in SE] --\u0026gt; SE[Software Engineering] H[MS in CIS] --\u0026gt; CIS[Computer Information Systems] I[MS in MIS] --\u0026gt; MIS[Management Information Systems] J[MS in IT] --\u0026gt; IT[Information Technology] graph LR A[Degree Types] --\u003e|Master's Degree| B[MA/MS] A --\u003e|Doctoral Degree| C[DA] B --\u003e D[MS in EE] B --\u003e E[MS in CE] B --\u003e F[MS in CS] B --\u003e G[MS in SE] B --\u003e H[MS in CIS] B --\u003e I[MS in MIS] B --\u003e J[MS in IT] D[MS in EE] --\u003e EE[Electrical Engineering] E[MS in CE] --\u003e CE[Computer Engineering] F[MS in CS] --\u003e CS[Computer Science] F[MS in CS] --\u003e DS[Data Science] G[MS in SE] --\u003e SE[Software Engineering] H[MS in CIS] --\u003e CIS[Computer Information Systems] I[MS in MIS] --\u003e MIS[Management Information Systems] J[MS in IT] --\u003e IT[Information Technology] ","permalink":"https://cuisiting.github.io/posts/cuisiting/master_cs/","summary":"keyword: 美国 计算机 硕士, USA ,CS , Master\n大学 MS - Master of Science EE - Electrical Engineering CE - Computer Engineering CS - Computer Science SE - Software Engineering CIS - Computer Information Systems MIS - Management Information Systems IT - Information Technology 德克萨斯州立大学（Texas State University）\ngraph LR A[Degree Types] --\u0026gt;|Master\u0026#39;s Degree| B[MA/MS] A --\u0026gt;|Doctoral Degree| C[DA] B --\u0026gt; D[MS in EE] B --\u0026gt; E[MS in CE] B --\u0026gt; F[MS in CS] B --\u0026gt; G[MS in SE] B --\u0026gt; H[MS in CIS] B --\u0026gt; I[MS in MIS] B --\u0026gt; J[MS in IT] D[MS in EE] --\u0026gt; EE[Electrical Engineering] E[MS in CE] --\u0026gt; CE[Computer Engineering] F[MS in CS] --\u0026gt; CS[Computer Science] F[MS in CS] --\u0026gt; DS[Data Science] G[MS in SE] --\u0026gt; SE[Software Engineering] H[MS in CIS] --\u0026gt; CIS[Computer Information Systems] I[MS in MIS] --\u0026gt; MIS[Management Information Systems] J[MS in IT] --\u0026gt; IT[Information Technology] graph LR A[Degree Types] --\u003e|Master's Degree| B[MA/MS] A --\u003e|Doctoral Degree| C[DA] B --\u003e D[MS in EE] B --\u003e E[MS in CE] B --\u003e F[MS in CS] B --\u003e G[MS in SE] B --\u003e H[MS in CIS] B --\u003e I[MS in MIS] B --\u003e J[MS in IT] D[MS in EE] --\u003e EE[Electrical Engineering] E[MS in CE] --\u003e CE[Computer Engineering] F[MS in CS] --\u003e CS[Computer Science] F[MS in CS] --\u003e DS[Data Science] G[MS in SE] --\u003e SE[Software Engineering] H[MS in CIS] --\u003e CIS[Computer Information Systems] I[MS in MIS] --\u003e MIS[Management Information Systems] J[MS in IT] --\u003e IT[Information Technology] ","title":"美国 计算机 硕士"}]