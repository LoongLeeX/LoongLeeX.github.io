<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My New Hugo Site – _index.md</title><link>http://example.com/</link><description>Recent Hugo news from gohugo.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><image><url>http://example.com/img/hugo.png</url><title>GoHugo.io</title><link>http://example.com/</link></image><atom:link href="http://example.com/index.xml" rel='self' type="application/rss+xml"/><item><title>Blog: AWS Shadowsocket</title><link>http://example.com/blog/devops/awsshadowsocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.com/blog/devops/awsshadowsocket/</guid><description>
&lt;p>keyword: Aws Shadowsocket&lt;/p>
&lt;p>&lt;img src="aws_instance_name.png" alt="Alt text">&lt;/p>
&lt;p>创建key 用于 ssh 鉴权登陆
&lt;img src="aws_instance_create_key.png" alt="Alt text">&lt;/p>
&lt;p>创建成功后，查看instance Details ip , ssh 登陆&lt;/p>
&lt;p>chmod 400 [your pem path]
ssh -i [your pem path] admin@your_ip&lt;/p>
&lt;p>安装 &lt;a href="https://github.com/shadowsocks/shadowsocks-libev/blob/master/docker/alpine/README.md">shadowsocket docker&lt;/a>&lt;/p>
&lt;p>docker pull shadowsocks/shadowsocks-libev&lt;/p>
&lt;p>指定 shadowsocks container 的端口，检查你的云服务是否开启了该端口&lt;/p>
&lt;p>启动 docker instance&lt;/p>
&lt;p>检查你的云服务是否开启了该端口
&lt;img src="aws_instance_check_port.png" alt="Alt text">&lt;/p>
&lt;p>ps=&amp;lt;你的密码&amp;gt;
port=&amp;lt;你的端口&amp;gt;&lt;/p>
&lt;p>docker run -e PASSWORD=$ps -p $port:8388 -p $port:8388/udp -d &amp;ndash;restart always shadowsocks/shadowsocks-libev&lt;/p>
&lt;p>&lt;img src="aws_change_port_1.png" alt="Alt text">
&lt;img src="aws_change_port_2.png" alt="Alt text">&lt;/p></description></item><item><title>Blog: AWS Shadowsocket</title><link>http://example.com/blog/devops/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.com/blog/devops/docker/</guid><description>
&lt;p>keyword: Docker&lt;/p>
&lt;p>&lt;a href="https://docs.docker.com/desktop/faqs/linuxfaqs/#:~:text=What%20is%20the%20difference%20between,technology%20that%20powers%20Docker%20containers.">What is the difference between Docker Desktop for Linux and Docker Engine?&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.docker.com/desktop/faqs/linuxfaqs/#:~:text=What%20is%20the%20difference%20between,technology%20that%20powers%20Docker%20containers.">Docker Desktop 和 Docker Engine 的区别&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.docker.com/desktop/install/debian/">Install docker for debian&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.docker.com/engine/install/debian/#install-using-the-repository">Install using the apt repository&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code># Add Docker&amp;#39;s official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl gnupg
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg
# Add the repository to Apt sources:
echo \
&amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
$(. /etc/os-release &amp;amp;&amp;amp; echo &amp;#34;$VERSION_CODENAME&amp;#34;) stable&amp;#34; | \
sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
sudo apt-get update
&lt;/code>&lt;/pre>&lt;p>Install the Docker packages.&lt;/p>
&lt;pre tabindex="0">&lt;code> sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
&lt;/code>&lt;/pre>&lt;p>Verify that the installation is successful by running the hello-world image:&lt;/p>
&lt;pre tabindex="0">&lt;code> sudo docker run hello-world
&lt;/code>&lt;/pre>&lt;p>当执行&lt;/p>
&lt;pre tabindex="0">&lt;code>docker pull
&lt;/code>&lt;/pre>&lt;p>遇到&lt;/p>
&lt;pre tabindex="0">&lt;code>permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post &amp;#34;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/images/create?fromImage=shadowsocks%2Fshadowsocks-libev&amp;amp;tag=edge&amp;#34;: dial unix /var/run/docker.sock: connect: permission denied
&lt;/code>&lt;/pre>&lt;p>为当前用户添加权限&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo gpasswd -a $USER docker
sudo vi /etc/ssh/sshd_config
find PasswordAuthentication key ,change value to yes
sudo passwd 你的用户名
# 重新登录
sudo pkill -9 -u 你的用户名
&lt;/code>&lt;/pre></description></item><item><title>Blog: Aws Shadowsocket 2</title><link>http://example.com/blog/devops/awsshadowsocket2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.com/blog/devops/awsshadowsocket2/</guid><description>
&lt;p>keyword: AWS instance&lt;/p>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/aws_instance_name.png" style="width:50%;">
&lt;p>创建key 用于 ssh 鉴权登陆
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/aws_instance_create_key.png" style="width:50%;">
&lt;/p>
&lt;p>创建成功后，查看instance Details ip , ssh 登陆&lt;/p>
&lt;pre tabindex="0">&lt;code>chmod 400 [your pem path]
ssh -i [your pem path] admin@your_ip
&lt;/code>&lt;/pre>&lt;p>安装 &lt;a href="https://github.com/shadowsocks/shadowsocks-libev/blob/master/docker/alpine/README.md">shadowsocket docker&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>docker pull shadowsocks/shadowsocks-libev
&lt;/code>&lt;/pre>&lt;p>指定 shadowsocks container 的端口，检查你的云服务是否开启了该端口&lt;/p>
&lt;p>启动 docker instance&lt;/p>
&lt;p>检查你的云服务是否开启了该端口
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/aws_instance_check_port.png" style="width:50%;">
&lt;/p>
&lt;pre tabindex="0">&lt;code>ps=&amp;lt;你的密码&amp;gt;
port=&amp;lt;你的端口&amp;gt;
docker run -e PASSWORD=$ps -p $port:8388 -p $port:8388/udp -d --restart always shadowsocks/shadowsocks-libev
&lt;/code>&lt;/pre>&lt;p>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/aws_change_port_1.png" style="width:50%;">
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/aws_change_port_2.png" style="width:50%;">
&lt;/p></description></item><item><title>Blog: Hadoop Architecture</title><link>http://example.com/blog/it/hadooparchitecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.com/blog/it/hadooparchitecture/</guid><description>
&lt;p>keyword: Hadoop, big data, AI, Architecture&lt;/p>
&lt;p>&lt;a href="https://www.cloudduggu.com/hadoop/architecture/">Hadoop Architecture&lt;/a>.&lt;/p>
&lt;p>Apache Hadoop has the following three layers of Architecture.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Map-Reduce&lt;/p>
&lt;/li>
&lt;li>
&lt;p>YARN&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HDFS&lt;/p>
&lt;/li>
&lt;/ol>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/hadoop_architecture.png" style="width:50%;">
&lt;ol>
&lt;li>Map-Reduce&lt;/li>
&lt;/ol>
&lt;p>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/hadoop_architecture_map_reduce.png" style="width:50%;">
2. YARN
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/hadoop_architecture_yarn.png" style="width:50%;">
3. HDFS
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/hadoop_architecture_hdfs_1.png" style="width:50%;">
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/hadoop_architecture_hdfs_2.png" style="width:50%;">
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/hadoop_architecture_hdfs_3.png" style="width:50%;">
&lt;/p></description></item><item><title>Blog: Hadoop Architecture</title><link>http://example.com/blog/it/spark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.com/blog/it/spark/</guid><description>
&lt;p>keyword: Hadopp, big date ,AI, Architecture&lt;/p>
&lt;p>&lt;a href="https://avinash333.com/spark-architecture/">Spark Architecture&lt;/a>.&lt;/p>
&lt;p>&lt;img src="image-7.png" alt="Alt text">&lt;/p></description></item><item><title>Blog: Installation</title><link>http://example.com/blog/my2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.com/blog/my2/</guid><description>
&lt;p>The following steps are here to help you initialize your new website. If you don&amp;rsquo;t know Hugo at all, we strongly suggest you learn more about it by following this &lt;a href="https://gohugo.io/overview/quickstart/">great documentation for beginners&lt;/a>.&lt;/p>
&lt;h2 id="create-your-project">Create your project&lt;/h2>
&lt;p>Hugo provides a &lt;code>new&lt;/code> command to create a new website.&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new site &amp;lt;new_project&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="install-the-theme">Install the theme&lt;/h2>
&lt;p>Install the &lt;strong>Hugo-theme-learn&lt;/strong> theme by following &lt;a href="https://gohugo.io/getting-started/quick-start/#step-3-add-a-theme">this documentation&lt;/a>&lt;/p>
&lt;p>This theme&amp;rsquo;s repository is: &lt;a href="https://github.com/matcornic/hugo-theme-learn.git">https://github.com/matcornic/hugo-theme-learn.git&lt;/a>&lt;/p>
&lt;p>Alternatively, you can &lt;a href="https://github.com/matcornic/hugo-theme-learn/archive/master.zip">download the theme as .zip&lt;/a> file and extract it in the &lt;code>themes&lt;/code> directory&lt;/p>
&lt;h2 id="basic-configuration">Basic configuration&lt;/h2>
&lt;p>When building the website, you can set a theme by using &lt;code>--theme&lt;/code> option. However, we suggest you modify the configuration file (&lt;code>config.toml&lt;/code>) and set the theme as the default. You can also add the &lt;code>[outputs]&lt;/code> section to enable the search functionality.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Change the default theme to be use when building the site with Hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">theme&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;hugo-theme-learn&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># For search functionality&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">outputs&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">home&lt;/span> = [ &lt;span style="color:#e6db74">&amp;#34;HTML&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;RSS&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;JSON&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-your-first-chapter-page">Create your first chapter page&lt;/h2>
&lt;p>Chapters are pages that contain other child pages. It has a special layout style and usually just contains a &lt;em>chapter name&lt;/em>, the &lt;em>title&lt;/em> and a &lt;em>brief abstract&lt;/em> of the section.&lt;/p>
&lt;pre tabindex="0">&lt;code>### Chapter 1
# Basics
Discover what this Hugo theme is all about and the core concepts behind it.
&lt;/code>&lt;/pre>&lt;p>renders as&lt;/p>
&lt;p>&lt;img src="http://example.com/en/basics/installation/images/chapter.png?classes=shadow&amp;amp;width=60pc" alt="A Chapter">&lt;/p>
&lt;p>&lt;strong>Hugo-theme-learn&lt;/strong> provides archetypes to create skeletons for your website. Begin by creating your first chapter page with the following command&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new --kind chapter basics/_index.md
&lt;/code>&lt;/pre>&lt;p>By opening the given file, you should see the property &lt;code>chapter=true&lt;/code> on top, meaning this page is a &lt;em>chapter&lt;/em>.&lt;/p>
&lt;p>By default all chapters and pages are created as a draft. If you want to render these pages, remove the property &lt;code>draft: true&lt;/code> from the metadata.&lt;/p>
&lt;h2 id="create-your-first-content-pages">Create your first content pages&lt;/h2>
&lt;p>Then, create content pages inside the previously created chapter. Here are two ways to create content in the chapter:&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new basics/first-content.md
hugo new basics/second-content/_index.md
&lt;/code>&lt;/pre>&lt;p>Feel free to edit thoses files by adding some sample content and replacing the &lt;code>title&lt;/code> value in the beginning of the files.&lt;/p>
&lt;h2 id="launching-the-website-locally">Launching the website locally&lt;/h2>
&lt;p>Launch by using the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo serve
&lt;/code>&lt;/pre>&lt;p>Go to &lt;code>http://localhost:1313&lt;/code>&lt;/p>
&lt;p>You should notice three things:&lt;/p>
&lt;ol>
&lt;li>You have a left-side &lt;strong>Basics&lt;/strong> menu, containing two submenus with names equal to the &lt;code>title&lt;/code> properties in the previously created files.&lt;/li>
&lt;li>The home page explains how to customize it by following the instructions.&lt;/li>
&lt;li>When you run &lt;code>hugo serve&lt;/code>, when the contents of the files change, the page automatically refreshes with the changes. Neat!&lt;/li>
&lt;/ol>
&lt;h2 id="build-the-website">Build the website&lt;/h2>
&lt;p>When your site is ready to deploy, run the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo
&lt;/code>&lt;/pre>&lt;p>A &lt;code>public&lt;/code> folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server.&lt;/p></description></item><item><title>Blog: Spark&amp;Hadoop</title><link>http://example.com/blog/it/sparkhadoop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.com/blog/it/sparkhadoop/</guid><description>
&lt;p>keyword: Hadopp, Spark, big data, AI, Architecture&lt;/p>
&lt;p>&lt;a href="https://developer.hpe.com/blog/performance-tuning-of-an-apache-kafkaspark-streaming-system-telecom-case/">Case Study 1&lt;/a>.&lt;/p>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/h_s_telecom_case.png" style="width:50%;">
&lt;p>&lt;a href="https://avinash333.com/spark-architecture/">Case Study 2&lt;/a>.&lt;/p>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/h_s_avinash333.png" style="width:50%;">
&lt;p>&lt;a href="https://www.databricks.com/blog/2016/06/22/apache-spark-key-terms-explained.html">Case Study 3&lt;/a>.&lt;/p>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/h_s_spark_key_terms.png" style="width:50%;">
&lt;p>&lt;a href="https://medium.com/@dogukannulu/data-engineering-end-to-end-project-1-7a7be2a3671">Case Study 4&lt;/a>&lt;/p>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/h_s_data_engineering_end_end.png" style="width:50%;">
&lt;h2 id="hadoop-vs-spark-使用场景">Hadoop vs Spark: 使用场景&lt;/h2>
&lt;h3 id="hadoop-使用场景">Hadoop 使用场景&lt;/h3>
&lt;p>Hadoop 适合以下场景：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>大规模数据存储和处理&lt;/strong>:
&lt;ul>
&lt;li>当需要处理 PB 级别的数据时，Hadoop 的 HDFS 提供了一个可靠的存储解决方案。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>高吞吐量的批处理作业&lt;/strong>:
&lt;ul>
&lt;li>对于需要高吞吐量而不是低延迟的长时间运行的批处理作业，Hadoop 是理想的选择。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>成本效益的解决方案&lt;/strong>:
&lt;ul>
&lt;li>对于预算有限的项目，Hadoop 的开源特性使其成为一种成本效益高的选择。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>兼容性和成熟的生态系统&lt;/strong>:
&lt;ul>
&lt;li>Hadoop 已经成熟，拥有一个庞大的生态系统，适用于各种数据处理需求。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="spark-使用场景">Spark 使用场景&lt;/h3>
&lt;p>Spark 适合以下场景：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>快速数据处理和实时分析&lt;/strong>:
&lt;ul>
&lt;li>当需要快速处理数据或进行实时数据分析时，Spark 的内存计算功能提供了显著的速度优势。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>迭代算法和机器学习&lt;/strong>:
&lt;ul>
&lt;li>对于需要迭代计算的机器学习算法，Spark 的内存计算比 Hadoop 更高效。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>多种数据处理格式&lt;/strong>:
&lt;ul>
&lt;li>如果需要支持多种数据处理方式（批处理、流处理、交互式查询、机器学习），Spark 提供了一站式解决方案。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>高级分析&lt;/strong>:
&lt;ul>
&lt;li>Spark 支持 SQL 查询、流处理和复杂的分析，这些在 Hadoop MapReduce 中不那么容易实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>根据项目需求和资源情况，可以选择适合的框架。在某些复杂的项目中，Hadoop 和 Spark 可以并行使用，以充分利用两者的优势。&lt;/p></description></item><item><title>Blog: 不花钱 ！搭建Blog！</title><link>http://example.com/blog/hugogithubaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.com/blog/hugogithubaction/</guid><description>
&lt;h2 id="环境要求">环境要求&lt;/h2>
&lt;p>git&lt;/p>
&lt;h2 id="开始盖别墅">开始盖别墅&lt;/h2>
&lt;ol>
&lt;li>安装hugo Hugo 官方安装：https://gohugo.io/installation/&lt;/li>
&lt;li>用hugo 命令 创建 后台工程，相当于系统后台，用于编辑Blog&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code> hugo new site MyBlog
cd MyBlog
git init
# 安装主题
git submodule add git@github.com:cuisiting/ hugo-theme-learn.git themes/hugo-theme-learn
# 指定主题
echo &amp;#34;theme = &amp;#39;hugo-theme-learn&amp;#39;&amp;#34; &amp;gt;&amp;gt; hugo.toml
# 部署到本地查看一下
hugo server
&lt;/code>&lt;/pre>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/image.png" style="width:50%;">
&lt;p>至此，我们在本地电脑上，创建一个hugo 工程来存储blog 文件&lt;/p>
&lt;p>小练习：增加一篇Blog，按如下的目录结构 添加文件 ，注意 需要创建 _index.md &amp;amp; 格式&lt;/p>
&lt;pre tabindex="0">&lt;code>RootProject
└──content/
├── _index.md
└── 个人随想
├── _index.md
└── my_first.md
&lt;/code>&lt;/pre>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/image-3.png" style="width:50%;">
&lt;ol start="3">
&lt;li>
&lt;p>如上，我们在本地电脑上，创建一个 工程MyBlog 来存储blog 文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>但是我们最终是需要将Blog 发布到 自由 、广大的互联网上。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>现在我们用一种成本最小，但体验极佳的方式 将我们的Blog发布&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建2个仓库https://github.com/new&lt;/p>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/image-create-repo.png" style="width:50%;">
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>创建后台仓库工程 &lt;a href="https://github.com/%5Busername%5D/MyBlog">https://github.com/[username]/MyBlog&lt;/a>，刚才的本地工程 push 到该后台仓库&lt;/li>
&lt;li>创建前台仓库工程，保存网站静态文件存储仓库，拥有前台展示，
注意：若期望通过 https://[username].github.io 来访问blog ，该仓库的名字须为 [username].github.io
&lt;a href="https://github.com/%5Busername%5D/%5Busername%5D.github.io">https://github.com/[username]/[username].github.io&lt;/a>&lt;/li>
&lt;/ul>
&lt;ol start="7">
&lt;li>
&lt;p>为了实现 后台仓库修改代码 &amp;mdash;&amp;gt; 前台仓库自动更新，我们需要利用github 的自动化CI/CD 工具 github action&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建 github action 所需秘钥
依次 点击 github头像 &amp;mdash;&amp;gt; Setting &amp;mdash;&amp;gt; Developer Settings &amp;ndash;&amp;gt; Personal access tokens&lt;/p>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/image-5.png" style="width:50%;">
&lt;/li>
&lt;li>
&lt;p>勾选&lt;/p>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/image-6.png" style="width:50%;">
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/image-7.png" style="width:50%;">
&lt;p>点击Generate token生成token，并先复制保存该token。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Attention！！！关键步骤&lt;/p>
&lt;ol>
&lt;li>在后台仓库 MyBlog 中 新建一个github-actions分支【可选】：git checkout -b github-actions&lt;/li>
&lt;li>在后台仓库 MyBlog 创建文件夹.github/workflows&lt;/li>
&lt;li>在workflows里新建一个后缀为publish.yml (名字不限)的配置文件&lt;/li>
&lt;li>将如下配置写入 publish.yml&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>name: github pages
on:
push:
branches:
- github-actions # 监听的分支名
jobs:
deploy:
runs-on: ubuntu-latest # 在什么环境运行任务
steps:
- uses: actions/checkout@v2
with:
submodules: true # Fetch git submodule 中的主题仓库
fetch-depth: 0
- name: Setup Hugo
uses: peaceiris/actions-hugo@v2
with:
hugo-version: &amp;#39;latest&amp;#39;
- name: Build
run: hugo --minify # hugo构建静态网页
- name: Deploy
uses: peaceiris/actions-gh-pages@v3
with:
# 注意：修改这个参数 格式为，[用户名]/[前台仓库名]
external_repository: tomial/tomial.github.io
# 发布到其他repo需要提供上面生成的 personal access token
personal_token: ${{ secrets.ACTION_ACCESS_TOKEN }}
publish_dir: ./public
# 发布branch
publish_branch: main
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>用git 命令将 .github/workflows/publish.yml 提交到后台仓库&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装评论&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hugo server 验证&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建github action&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="参考link">参考link&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://gohugo.io/installation/">https://gohugo.io/installation/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gohugo.io/getting-started/quick-start/">https://gohugo.io/getting-started/quick-start/&lt;/a>&lt;/li>
&lt;/ol>
&lt;img src="https://github.com/cuisiting/cuisiting.github.io/raw/main/image-7.png" width="50%"></description></item><item><title>Blog: 设置HugoMarkdown图片大小</title><link>http://example.com/blog/%E8%AE%BE%E7%BD%AEhugomarkdown%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.com/blog/%E8%AE%BE%E7%BD%AEhugomarkdown%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F/</guid><description>
&lt;p>&lt;a href="https://gohugo.io/templates/render-hooks/">https://gohugo.io/templates/render-hooks/&lt;/a>&lt;/p></description></item></channel></rss>